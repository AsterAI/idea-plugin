{
    parserClass="com.zephir.parser.ZephirParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zephir"
    psiImplClassSuffix="Impl"
    psiPackage="com.zephir.psi"
    psiImplPackage="com.zephir.psi.impl"

    elementTypeHolderClass="com.zephir.psi.ZephirTypes"
    elementTypeClass="com.zephir.psi.ZephirElementType"
    tokenTypeClass="com.zephir.psi.ZephirTokenType"
    tokens = [
        // regex
        comment_pattern='regexp://.*'
        identifier_pattern='regexp:([\\_\$]?[_a-zA-Z\\][a-zA-Z0-9\_\\]*)'
        integer_pattern='regexp:([\-]?[0-9]+)|([\-]?[0][x][0-9A-Fa-f]+)'
        double_pattern='regexp:([\-]?[0-9]+[\.][0-9]+)'
        schar_pattern="regexp:(['] ([\\][']|[\\].|[\001-\377]\[\\'])* ['])"
        string_pattern='regexp:(["] ([\\]["]|[\\].|[\001-\377]\[\\"])* ["])'
        cblock_pattern='regexp:("%{"([^}]+|[}]+[^%{])*"}%")'

        // OOP keywords
        NAMESPACE="namespace"
        USE="use"
        AS="as"
        INTEFACE="interface"
        CLASS="class"
        FUNCTION="function" // fn
        EXTENDS="extends"
        IMPLEMENTS="implements"
        ABSTRACT="abstract"
        FINAL="final"
        PUBLIC="public"
        PROTECTED="protected"
        PRIVATE="private"
        STATIC="static"
        INLINE="inline"
        DEPRECATED="deprecated"

        // types
        VAR="var"
        VOID="void"
        INT="int"
        UINT="uint"
        LONG="long"
        ULONG="ulong"
        CHAR="char"
        UCHAR="uchar"
        DOUBLE="double" // float
        BOOL="bool" // boolean
        STRING="string"
        ARRAY="array"
        OBJECT="object"
        CALLABLE="callable"
        RESOURCE="resource"

        // value keywords
        NULL="null"
        FALSE="false"
        TRUE="true"

        // keywords
        LET="let"
        ECHO="echo"
        CONST="const"
        IF="if"
        ELSE="else"
        SWITCH="swith"
        CASE="case"
        DEFAULT="default"
        DO="do"
        WHILE="while"
        FOR="for"
        LOOP="loop"
        REVERSE="reverse"
        BREAK="break"
        CONTINUE="continue"
        IN="in"
        NEW="new"
        RETURN="return"
        REQUIRE="require"
        CLONE="clone"
        EMPTY="empty"
        TYPEOF="typeof"
        INSTANCEOF="instanceof"
        LIKELY="likely"
        UNLIKELY="unlikely"
        ISSET="isset"
        UNSET="unset"
        THROW="throw"
        FETCH="fetch"
        TRY="try"
        CATCH="catch"

        //other
        PARENTHESES_OPEN="("
        PARENTHESES_CLOSE=")"
        BRACKET_OPEN="{"
        BRACKET_CLOSE="}"
        SBRACKET_OPEN="["
        SBRACKET_CLOSE="]"
        AT="@"
        NOT="!"
        AND="&&"
        OR="||"
        BITWISE_AND="&"
        BITWISE_OR="|"
        BITWISE_XOR="^"
        BITWISE_SHIFTLEFT="<<"
        BITWISE_SHIFTRIGHT=">>"
        ASSIGN="="
        ADDASSIGN="+="
        SUBASSIGN="-="
        MULASSIGN="*="
        DIVASSIGN="/="
        MODASSIGN="%="
        CONCATASSIGN=".="
        EQUALS="=="
        NOTEQUALS="!="
        IDENTICAL="==="
        NOTIDENTICAL="!=="
        LESSEQUAL="<="
        GREATEREQUAL=">="
        LESS="<"
        GREATER=">"
        ARROW="->"
        DOUBLECOLON="::"
        DOT="."
        ADD="+"
        SUB="-"
        MUL="*"
        EXP="**"
        DIV="/"
        MOD="%"
        INCR="++"
        DECR="--"
        COLON=":"
        DOTCOMMA=";"
        COMMA=","
        QUESTION="?"
    ]
}

zephirFile ::= namespaceStatement*

namespaceStatement ::= 'namespace' identifier ';' {pin=1}
