{
    parserClass="com.zephir.parser.ZephirParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zephir"
    psiImplClassSuffix="Impl"
    psiPackage="com.zephir.psi"
    psiImplPackage="com.zephir.psi.impl"

    elementTypeHolderClass="com.zephir.psi.ZephirTypes"
    elementTypeClass="com.zephir.psi.ZephirElementType"
    tokenTypeClass="com.zephir.psi.ZephirTokenType"
    tokens = [
        // regex
        comment='regexp://.*'
        comment_block='regexp:(/*([^*]+|[*]+[^/*])*[*]**/)'
        identifier='regexp:([\\_\$]?[_a-zA-Z\\][a-zA-Z0-9\_\\]*)'
        integer='regexp:([\-]?[0-9]+)|([\-]?[0][x][0-9A-Fa-f]+)'
        double='regexp:([\-]?[0-9]+[\.][0-9]+)'
        schar="regexp:(['] ([\\][']|[\\].|[\001-\377]\[\\'])* ['])"
        string='regexp:(["] ([\\]["]|[\\].|[\001-\377]\[\\"])* ["])'
        cblock='regexp:(%{([^}]+|[}]+[^%{])*}%)'

        // OOP keywords
        NAMESPACE="namespace"
        USE="use"
        AS="as"
        INTEFACE="interface"
        CLASS="class"
        FUNCTION="function" // fn
        EXTENDS="extends"
        IMPLEMENTS="implements"
        ABSTRACT="abstract"
        FINAL="final"
        PUBLIC="public"
        PROTECTED="protected"
        PRIVATE="private"
        STATIC="static"
        INLINE="inline"
        DEPRECATED="deprecated"

        // types
        TYPE_VAR="var"
        TYPE_VOID="void"
        TYPE_INT="int"
        TYPE_UINT="uint"
        TYPE_LONG="long"
        TYPE_ULONG="ulong"
        TYPE_CHAR="char"
        TYPE_UCHAR="uchar"
        TYPE_DOUBLE="double" // float
        TYPE_BOOL="bool" // boolean
        TYPE_STRING="string"
        TYPE_ARRAY="array"
        TYPE_OBJECT="object"
        TYPE_CALLABLE="callable"
        TYPE_RESOURCE="resource"

        // value keywords
        NULL="null"
        FALSE="false"
        TRUE="true"

        // keywords
        LET="let"
        ECHO="echo"
        CONST="const"
        IF="if"
        ELSE="else"
        ELSEIF="elseif"
        SWITCH="swith"
        CASE="case"
        DEFAULT="default"
        DO="do"
        WHILE="while"
        FOR="for"
        LOOP="loop"
        REVERSE="reverse"
        BREAK="break"
        CONTINUE="continue"
        IN="in"
        NEW="new"
        RETURN="return"
        REQUIRE="require"
        CLONE="clone"
        EMPTY="empty"
        TYPEOF="typeof"
        INSTANCEOF="instanceof"
        LIKELY="likely"
        UNLIKELY="unlikely"
        ISSET="isset"
        UNSET="unset"
        THROW="throw"
        FETCH="fetch"
        TRY="try"
        CATCH="catch"

        //other
        PARENTHESES_OPEN="("
        PARENTHESES_CLOSE=")"
        BRACKET_OPEN="{"
        BRACKET_CLOSE="}"
        SBRACKET_OPEN="["
        SBRACKET_CLOSE="]"
        AT="@"
        NOT="!"
        AND="&&"
        OR="||"
        BITWISE_AND="&"
        BITWISE_OR="|"
        BITWISE_XOR="^"
        BITWISE_SHIFTLEFT="<<"
        BITWISE_SHIFTRIGHT=">>"
        ASSIGN="="
        ADDASSIGN="+="
        SUBASSIGN="-="
        MULASSIGN="*="
        DIVASSIGN="/="
        MODASSIGN="%="
        CONCATASSIGN=".="
        EQUALS="=="
        NOTEQUALS="!="
        IDENTICAL="==="
        NOTIDENTICAL="!=="
        LESSEQUAL="<="
        GREATEREQUAL=">="
        LESS="<"
        GREATER=">"
        ARROW="->"
        DOUBLECOLON="::"
        DOT="."
        ADD="+"
        SUB="-"
        MUL="*"
        EXP="**"
        DIV="/"
        MOD="%"
        INCR="++"
        DECR="--"
        COLON=":"
        DOTCOMMA=";"
        COMMA=","
        QUESTION="?"
    ]
}

zephirFile ::= topStatementList

classModifier ::= 'abstract' | 'final'
scopeModifier ::= 'public' | 'protected' | 'private'
functionModifier ::= 'function' | 'fn'

variableType ::= 'var' | numberType | stringType | boolType | 'array' | 'object' | 'callable' | 'resource'
stringType ::= 'string' | 'char' | 'uchar'
boolType ::= 'bool' | 'boolean'
numberType ::= intType | doubleType | 'uint' | 'long' | 'ulong'
intType ::= 'int' | 'integer'
doubleType ::= 'dobule' | 'float'

topStatementList ::= topStatement topStatementList*

topStatement ::= namespaceDefinition useAliases* namespaceBody*

private namespaceBody ::= classDefinition | interfaceDefinition

namespaceDefinition ::= 'namespace' identifier ';'

useAliases ::= useAliasDefinition useAliases*
useAliasDefinition ::= 'use' identifier ';'

interfaceDefinition ::= 'interface' identifier interfaceExtending* interfaceBody
interfaceExtending ::= 'extends' extendList

classDefinition ::= classModifier* 'class' identifier '{' classBody '}'

interfaceBody ::= '{' interfaceMethods* '}'
interfaceMethods ::= interfaceMethod interfaceMethods*
interfaceMethod ::= scopeModifier functionModifier identifier '(' arguments* ')' ';'


arguments ::= argument ',' arguments*
argument ::= variableType* identifier
