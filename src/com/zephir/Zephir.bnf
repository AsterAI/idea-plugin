{
    parserClass="com.zephir.parser.ZephirParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zephir"
    psiImplClassSuffix="Impl"
    psiPackage="com.zephir.psi"
    psiImplPackage="com.zephir.psi.impl"

    elementTypeHolderClass="com.zephir.psi.ZephirTypes"
    elementTypeClass="com.zephir.psi.ZephirElementType"
    tokenTypeClass="com.zephir.psi.ZephirTokenType"
    tokens = [
        // regex
        comment='regexp://.*'
        comment_block='regexp:(/*([^*]+|[*]+[^/*])*[*]**/)'
        identifier='regexp:([\\_\$]?[_a-zA-Z\\][a-zA-Z0-9\_\\]*)'
        integer='regexp:([\-]?[0-9]+)|([\-]?[0][x][0-9A-Fa-f]+)'
        double='regexp:([\-]?[0-9]+[\.][0-9]+)'
        schar="regexp:(['] ([\\][']|[\\].|[\001-\377]\[\\'])* ['])"
        string='regexp:(["] ([\\]["]|[\\].|[\001-\377]\[\\"])* ["])'
        cblock='regexp:(%{([^}]+|[}]+[^%{])*}%)'

        // OOP keywords
        NAMESPACE="namespace"
        USE="use"
        AS="as"
        INTEFACE="interface"
        CLASS="class"
        FUNCTION="function" // fn
        EXTENDS="extends"
        IMPLEMENTS="implements"
        ABSTRACT="abstract"
        FINAL="final"
        PUBLIC="public"
        PROTECTED="protected"
        PRIVATE="private"
        STATIC="static"
        INLINE="inline"
        DEPRECATED="deprecated"

        // types
        TYPE_VAR="var"
        TYPE_VOID="void"
        TYPE_INT="int"
        TYPE_UINT="uint"
        TYPE_LONG="long"
        TYPE_ULONG="ulong"
        TYPE_CHAR="char"
        TYPE_UCHAR="uchar"
        TYPE_DOUBLE="double" // float
        TYPE_BOOL="bool" // boolean
        TYPE_STRING="string"
        TYPE_ARRAY="array"
        TYPE_OBJECT="object"
        TYPE_CALLABLE="callable"
        TYPE_RESOURCE="resource"

        // value keywords
        NULL="null"
        FALSE="false"
        TRUE="true"

        // keywords
        LET="let"
        ECHO="echo"
        CONST="const"
        IF="if"
        ELSE="else"
        ELSEIF="elseif"
        SWITCH="swith"
        CASE="case"
        DEFAULT="default"
        DO="do"
        WHILE="while"
        FOR="for"
        LOOP="loop"
        REVERSE="reverse"
        BREAK="break"
        CONTINUE="continue"
        IN="in"
        NEW="new"
        RETURN="return"
        REQUIRE="require"
        CLONE="clone"
        EMPTY="empty"
        TYPEOF="typeof"
        INSTANCEOF="instanceof"
        LIKELY="likely"
        UNLIKELY="unlikely"
        ISSET="isset"
        UNSET="unset"
        THROW="throw"
        FETCH="fetch"
        TRY="try"
        CATCH="catch"

        //other
        PARENTHESES_OPEN="("
        PARENTHESES_CLOSE=")"
        BRACKET_OPEN="{"
        BRACKET_CLOSE="}"
        SBRACKET_OPEN="["
        SBRACKET_CLOSE="]"
        AT="@"
        NOT="!"
        AND="&&"
        OR="||"
        BITWISE_AND="&"
        BITWISE_OR="|"
        BITWISE_XOR="^"
        BITWISE_SHIFTLEFT="<<"
        BITWISE_SHIFTRIGHT=">>"
        ASSIGN="="
        ADDASSIGN="+="
        SUBASSIGN="-="
        MULASSIGN="*="
        EXPASSIGN="**="
        DIVASSIGN="/="
        MODASSIGN="%="
        CONCATASSIGN=".="
        EQUALS="=="
        NOTEQUALS="!="
        IDENTICAL="==="
        NOTIDENTICAL="!=="
        LESSEQUAL="<="
        GREATEREQUAL=">="
        LESS="<"
        GREATER=">"
        ARROW="->"
        DOUBLECOLON="::"
        DOT="."
        ADD="+"
        SUB="-"
        MUL="*"
        EXP="**"
        DIV="/"
        MOD="%"
        INCR="++"
        DECR="--"
        COLON=":"
        DOTCOMMA=";"
        COMMA=","
        QUESTION="?"
    ]

    extends(".*expr")=expr
}

zephir_file ::= top_statement*

private top_statement ::= namespace_statement import_statement* (class_definition | interface_definition)

namespace_statement ::= 'namespace' complex_id ';' {pin=2}

import_statement ::= 'use' complex_id ('as' id)? ';' {pin=2}

class_definition ::= class_modifier? 'class' id super_class? implements_list? class_body {pin=3}
class_modifier ::= 'abstract' | 'final'
super_class ::= 'extends' complex_id {pin=1}
implements_list ::= 'implements' complex_id_list {pin=1}
class_body ::= '{' class_member* '}' {pin=1}
private class_member ::= constant_definition |
                         property_definition |
                         method_definition

interface_definition ::= 'interface' id super_interfaces? interface_body {pin=2}
super_interfaces ::= 'extends' complex_id_list {pin=1}
interface_body ::= '{' interface_member* '}' {pin=1}
private interface_member ::= constant_definition |
                             interface_method_definition

interface_method_definition ::= method_modifiers* visibility FUNCTION id '(' arguments* ')' return_type? ';' {pin=4}

constant_definition ::= 'const' id default_value? ';' {pin=2}

property_definition ::= 'static'? visibility id default_value? ';' {pin=3}

method_definition ::= method_modifiers* visibility FUNCTION id '(' arguments* ')' return_type? code_block {pin=4}
method_modifiers ::= 'static' | 'inline' | 'deprecated'
code_block ::= '{' code* '}' {pin=1}

return_type ::= '->' type ('|' type)*

default_value ::= '=' expr {pin=1}
visibility ::= 'public' | 'protected' | 'private'

id ::= identifier
complex_id ::= id ('\' id)*
complex_id_list ::= complex_id (',' complex_id)*

type ::= 'var' | number_type | string_type | bool_type | 'array' | 'object' | 'callable' | 'resource' | class_type
private string_type ::= 'string' | 'char' | 'uchar'
private bool_type ::= 'bool' | 'boolean'
private number_type ::= int_type | double_type | 'uint' | 'long' | 'ulong'
private int_type ::= 'int' | 'integer'
private double_type ::= 'dobule' | 'float'
private class_type ::= '<' complex_id '>'


expr ::= scalar |
         variable


scalar ::= string | schar | double | integer
variable ::= id // @todo: add a->b, a->{"b"} a[b]

new_expr ::= 'new' complex_id '(' arguments? ')'
assignment_operator ::= '=' | '+=' | '-=' | '*=' | '**=' | '/=' | '%=' | '.='
math_operator ::= '+' | '-' | '*' | '**' | '/' | '%' | '.'
bool_operator ::= '&&' | '||' | '>' | '<' | '==' | '>=' | '<=' | '==='
bit_operator ::= '&' | '|' | '^' | '>>' | '<<'
increment_operator ::= '++' | '--'


code ::= declaration_statement |
         let_statement |
         control_statement |
         loop_statement |
         switch_statement |
         if_statement |
         try_statement |
         return_statement |
         echo_statement |
         throw_statement |
         require_statement


declaration_statement ::= type id (',' id)* ';' {pin=1}

let_statement ::= 'let' assignment_expr (',' assignment_expr)* ';' {pin=1}
assignment_expr ::= variable assignment_operator expr

control_statement ::= ('continue' | 'break') ';'

loop_statement ::= infinity_loop_statement |
                   while_loop_statement |
                   foreach_loop_statement

infinity_loop_statement ::= 'loop' code_block {pin=1}

while_loop_statement ::= 'while' expr code_block {pin=2}

foreach_loop_statement ::= 'for' id (',' id)? 'in' expr code_block {pin=2}

switch_statement ::= 'switch' expr '{' switch_body '}' {pin=1}
switch_body ::= ('case' expr | 'default') ':' code* {pin=1}

if_statement ::= 'if' expr code_block elseif_statements* else_statement? {pin=1}
elseif_statements ::= 'elseif' expr code_block {pin=1}
else_statement ::= 'else' code_block {pin=1}

try_statement ::= 'try' code_block catch_block*  {pin=1}
catch_block ::= 'catch' class_type? id code_block {pin=3}

return_statement ::= 'return' expr ';' {pin=1}

echo_statement ::= 'echo' expr (',' expr)* ';' {pin=1}

throw_statement ::= 'throw' expr ';' {pin=1}
require_statement ::= 'require' expr ';' {pin=1}
