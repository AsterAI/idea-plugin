{
    parserClass="com.zephir.parser.ZephirParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zephir"
    psiImplClassSuffix="Impl"
    psiPackage="com.zephir.psi"
    psiImplPackage="com.zephir.psi.impl"

    elementTypeHolderClass="com.zephir.psi.ZephirTypes"
    elementTypeClass="com.zephir.psi.ZephirElementType"
    tokenTypeClass="com.zephir.psi.ZephirTokenType"
    tokens = [
        // regex
        identifier="regexp://[\\_\$]?[_a-zA-Z\\][a-zA-Z0-9\_\\]*"

        // OOP keywords
        NAMESPACE="namespace"
        USE="use"
        AS="as"
        INTEFACE="interface"
        CLASS="class"
        FUNCTION="function" // fn
        EXTENDS="extends"
        IMPLEMENTS="implements"
        ABSTRACT="abstract"
        FINAL="final"
        PUBLIC="public"
        PROTECTED="protected"
        PRIVATE="private"
        STATIC="static"
        INLINE="inline"
        DEPRECATED="deprecated"

        // types
        VAR="var"
        VOID="void"
        INT="int"
        UINT="uint"
        LONG="long"
        ULONG="ulong"
        CHAR="char"
        UCHAR="uchar"
        DOUBLE="double" // float
        BOOL="bool" // boolean
        STRING="string"
        ARRAY="array"
        OBJECT="object"
        CALLABLE="callable"
        RESOURCE="resource"

        // value keywords
        NULL="null"
        FALSE="false"
        TRUE="true"

        // keywords
        LET="let"
        ECHO="echo"
        CONST="const"
        IF="if"
        ELSE="else"
        SWITCH="swith"
        CASE="case"
        DEFAULT="default"
        DO="do"
        WHILE="while"
        FOR="for"
        LOOP="loop"
        REVERSE="reverse"
        BREAK="break"
        CONTINUE="continue"
        IN="in"
        NEW="new"
        RETURN="return"
        REQUIRE="require"
        CLONE="clone"
        EMPTY="empty"
        TYPEOF="typeof"
        INSTANCEOF="instanceof"
        LIKELY="likely"
        UNLIKELY="unlikely"
        ISSET="isset"
        UNSET="unset"
        THROW="throw"
        FETCH="fetch"
        TRY="try"
        CATCH="catch"

        //other
        LBRACE="{"
        RBRACE="}"
        LBRACKET="["
        RBRACKET="]"
        LPAREN="("
        RPAREN=")"
        SEMICOLON=";"
        MINUS="-"
        MINUS_EQ="-="
        MINUS_MINUS="--"
        PLUS="+"
        PLUS_PLUS="++"
        PLUS_EQ="+="
        DIV="/"
        DIV_EQ="/="
        MUL="*"
        MUL_EQ="*="
        INT_DIV="~/"
        INT_DIV_EQ="~/="
        REM_EQ="%="
        REM="%"
        BIN_NOT="~"
        NOT="!"

        EQ="="
        EQ_EQ="=="
        NEQ="!="
        DOT="."
        COMMA=","
        COLON=":"
        GT=">"
        GT_EQ=">="
        GT_GT_EQ=">>="
        LT="<"
        LT_EQ="<="
        LT_LT="<<"
        LT_LT_EQ="<<="
        QUEST="?"
        OR="|"
        OR_EQ="|="
        OR_OR="||"
        XOR="^"
        XOR_EQ="^="
        AND="&"
        AND_EQ="&="
        AND_AND="&&"
        HASH="#"
        AT="@"
    ]
}
